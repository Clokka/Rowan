# How to Deploy This Application for Production & Local Development

This document provides a step-by-step guide to deploying this web app. The application consists of two main parts:

1.  **A Python/Flask backend** for processing payments with Stripe and cart items.
2.  **A static HTML, CSS, and JavaScript frontend** for the user interface.

---

This document has 4 main sections:

1.  **Part 1: Backend Deployment (Python/Flask)**
2.  **Part 2: Frontend Deployment (Static Files)**
3.  **Part 3: Keeping the Server Running Permanently (on background)**
4.  **Part 4: Local Development Setup (e.g. VS Code development)**

---

## Part 1: Backend Deployment (Python/Flask)

Follow these steps to get the backend server running in a production environment.

### 1. Prerequisites

- Make sure you have **Python 3** installed. You can download it from [python.org](https://www.python.org/downloads/).
- `pip` (Python's package installer) is also required, which typically comes with Python.

### 2. Navigate to the Backend Directory

Open your terminal or command prompt and change into the `backend` directory:
```bash
cd backend
```

### 3. Create and Activate a Virtual Environment

It's a best practice to use a virtual environment to manage project dependencies.
At `project-folder/backend/` run the following commands bellow:

**Create the environment:**
```bash
python -m venv venv
```

**Activate the environment:**
- **On Windows:**
  ```cmd
  venv\Scripts\activate
  ```
- **On macOS and Linux:**
  ```bash
  source venv/bin/activate
  ```
Use `deactivate` to leave venv whenever you want.

### 4. Install Dependencies

In the virtual environment (venv), install the required Python packages using the `requirements.txt` file:
```bash
pip install -r requirements.txt
```

### 5. Configure Environment Variables

The backend requires sensitive information and configuration to be set via environment variables.

1.  In the `backend` directory, create a new file named `.env`.
2.  Ensure you have a `.gitignore` file in the root directory and have `.env` written on it.
3.  Add the following content to the `.env` file, replacing the placeholder values with your own:

    ```env
    # Get your Stripe secret key from your Stripe Dashboard (Developers > API keys)
    # Use your "Secret key" (starts with sk_live_...) for production.
    STRIPE_SECRET_KEY=sk_live_...

    # The public URL where your frontend is hosted (e.g., https://clokka.co.uk)
    # This is used for redirecting after a successful or canceled payment.
    DOMAIN=https://clokka.co.uk

    # A comma-separated list of allowed origins for Cross-Origin Resource Sharing (CORS).
    # This MUST include the domain where your frontend is hosted.
    CORS_ORIGINS=https://clokka.co.uk,http://clokka.co.uk.com,http://localhost:5500,http://127.0.0.1:5500
    ```

### 6. Run the Production Server

The backend should be run with a production-grade WSGI server. The `wsgi.py` file is configured for this purpose.
Run the commands below from the root directory of your project, in the terminal (CMD).

- **On Windows (using Waitress):**
  ```bash
  waitress-serve --host=0.0.0.0 --port=8000 backend.wsgi:app
  ```

- **On macOS and Linux (using Gunicorn):**
  ```bash
  gunicorn --bind 0.0.0.0:8000 -w 4 backend.wsgi:app
  ```

Your backend API is now running and listening for requests on port 8000, but you can change to any port of your preference.

---

## Part 2: Frontend Deployment (Static Files)

The frontend consists of static files (`.html`, `.css`, `.js`, images) that need to be hosted.

### 1. IMPORTANT: Configure the Backend URL

Before deploying, you must update the hardcoded backend URL in the frontend code.

1.  Open the `checkout.html` file in the root of the project.
2.  Search for the term `create-checkout-session`.
3.  You will see the following line of code:
    ```javascript
    const response = await fetch('http://127.0.0.1:5000/create-checkout-session', {
    ```
4.  Change the URL `'http://127.0.0.1:5000'` to the public IP address or domain name of your deployed backend server.

    **For example:** If your backend is running on a server with the IP `203.0.113.42`, you would change it to:
    ```javascript
    const response = await fetch('https://203.0.113.42:8000/create-checkout-session', {
    ```

    If you have a domain name (`clokka.co.uk`) pointing to your backend server, you would use that:
    ```javascript
    const response = await fetch('https://clokka.co.uk/create-checkout-session', {
    ```

    **If you are NOT using a reverse proxy (e.g. Nginx):** You must expose port 8000 on your server and include it in the URL. This is not recommended for production.
    ```javascript
    const response = await fetch('https://clokka.co.uk:8000/create-checkout-session', {
    ```

Test which option works best for you

### 2. Host the Static Files (if you aren't yet)

The frontend files are all the files and folders in the root directory **except for the `backend` folder**.

You can deploy these static files to any static web hosting service. Popular choices include:
- [Netlify](https://www.netlify.com/)
- [Vercel](https://vercel.com/)
- [GitHub Pages](https://pages.github.com/)
- [AWS S3](https://aws.amazon.com/s3/)
- A traditional web server like [Nginx](https://www.nginx.com/) or [Apache](https://https.apache.org/).

Simply upload the frontend files (`index.html`, `shop.html`, `style.css`, etc.) and directories (`images`, `shared`) to your chosen provider. Your website will then be live.

---

## Part 3: Keeping the Server Running Permanently (on background)

If you run the `waitress-serve` or `gunicorn` command directly in your terminal, the server will stop as soon as you close the terminal. To make it run continuously in the background, you should run it as a service.

### On Windows (using NSSM)

The easiest way to create a Windows service from the command is to use a tool called **NSSM (the Non-Sucking Service Manager)**.

1.  **Download NSSM:** Get the latest version from [nssm.cc/download](https://nssm.cc/download). Extract the `nssm.exe` file to a place you can easily access it (e.g., `C:\NSSM`).
2.  **Open an Administrator CMD:** Right-click the Command Prompt and select "Run as administrator".
3.  **Install the service:** Run the NSSM installer for your application. This command opens a graphical interface.
    ```cmd
    C:\NSSM\nssm.exe install ClokkaBackend
    ```
4.  **In the NSSM GUI that pops up:**
    *   **Application Tab -> Path:** Enter the full path to your `waitress-serve.exe`. This will be inside your project's virtual environment scripts folder. For example: `D:\Dev\Rowan-new\backend\venv\Scripts\waitress-serve.exe`
    *   **Application Tab -> Startup directory:** Enter the full path to your project's **root** directory. For example: `D:\Dev\Rowan-new`
    *   **Application Tab -> Arguments:** Enter the same arguments you used in the terminal: `--host=0.0.0.0 --port=8000 backend.wsgi:app`
    *   **Details Tab -> Display name:** You can give it a name like `Clokka Backend Server`.
5.  Click **Install service**.
6.  **Start the service:** You can now start (and stop, or restart) your service from the command line or from the Windows Services app (`services.msc`).
    ```cmd
    nssm start ClokkaBackend
    ```

Your backend will now start automatically when the server boots up and will run continuously in the background.

### On Linux (using systemd)

On most modern Linux systems, you can use `systemd` to manage services.

1.  **Create a service file:** Use a text editor like `nano` to create a service file.
    ```bash
    sudo nano /etc/systemd/system/clokka.service
    ```
2.  **Add the following content** to the file. Be sure to replace `/path/to/your/project` with the actual absolute path to the project's root folder (e.g., `/home/user/Rowan-new`).

    ```ini
    [Unit]
    Description=Gunicorn instance to serve the Clokka backend
    After=network.target

    [Service]
    User=your_linux_user  # Replace with the user you want to run the app as
    Group=www-data # Or your user's group
    WorkingDirectory=/path/to/your/project
    Environment="PATH=/path/to/your/project/backend/venv/bin"
    ExecStart=/path/to/your/project/backend/venv/bin/gunicorn --workers 4 --bind 0.0.0.0:8000 backend.wsgi:app

    [Install]
    WantedBy=multi-user.target
    ```

3.  **Save and close** the file (in `nano`, press `Ctrl+X`, then `Y`, then `Enter`).
4.  **Start and enable the service:** Now, you can start the service and enable it to launch on boot.
    ```bash
    sudo systemctl start clokka
    sudo systemctl enable clokka
    ```
5.  **Check the status:** You can check if the service is running correctly with:
    ```bash
    sudo systemctl status clokka
    ```

---

## Part 4: Local Development Setup (e.g. VS Code development)

If you want to run the website on your own PC to develop and test changes, you'll need to run both the frontend and backend servers simultaneously.

### 1. Running the Backend Locally

The backend Flask server has a built-in development mode that is easy to run.

1.  **Open a terminal** in VSCode (`Ctrl+` \` `` or `Terminal > New Terminal`) or on your own terminal.

2.  **Navigate to the backend folder** and activate the virtual environment:
    ```powershell
    cd backend
    venv\Scripts\activate
    ```
    (Use `source venv/bin/activate` on macOS/Linux).

3.  **Configure for Local Development:**
    *   Make sure your `.env` file in the `backend` folder is set up for development. You should use your **Stripe Test Keys** for `STRIPE_SECRET_KEY`.
    *   The `DOMAIN` should point to your local frontend server (e.g., `http://127.0.0.1:5500`).
    *   The `CORS_ORIGINS` in your `.env` file should already include the necessary local addresses (`http://localhost:5500` and `http://127.0.0.1:5500`), so that should be fine.

4.  **(Recommended)** For a better development experience, open `backend/app.py` and change the last line from `app.run(port=5000, debug=False)` to `app.run(port=5000, debug=True)`. The `debug=True` flag will automatically restart the server whenever you save changes to the Python code.

5.  **Run the backend server:**
    In the venv, at the backend/ directory, run the following command:

    ```bash
    python app.py
    ```
    Your backend is now running at `http://127.0.0.1:5000`. You need to keep this terminal window open while you are developing. 
    
    To stop running just press `Ctrl+C` (in the terminal window).

### 2. Running the Frontend Locally

The easiest way to serve the frontend files is with the **Live Server** extension in VS Code.

1.  **Install Live Server:** Go to the Extensions view (`Ctrl+Shift+X`) and search for "Live Server" by Ritwick Dey. Click Install.
2.  **Start the server:** In the Explorer panel, right-click on the `index.html` file and select **"Open with Live Server"** (or click in the `Go Live` button at the bottom right corner of VsCode). 
3.  Your default web browser will open with your website, likely at an address like `http://127.0.0.1:5500`.

### 3. Connecting Frontend to Backend

The final step is to tell your frontend (running on Live Server) to talk to your local backend (running in the terminal).

1.  Open the `checkout.html` file.
2.  You will find a comment already prepared for this. You need to change the `fetch` URL to point to your local backend.

    **Change this:**
    ```javascript
    // If you are running locally, use http://127.0.0.1:5000/create-checkout-session
    // If you are deploying online for production, use https://clokka.co.uk/create-checkout-session
    const response = await fetch('https://clokka.co.uk/create-checkout-session', {
    ```

    **To this:**
    ```javascript
    // If you are running locally, use http://127.0.0.1:5000/create-checkout-session
    // If you are deploying online for production, use https://clokka.co.uk/create-checkout-session
    const response = await fetch('http://127.0.0.1:5000/create-checkout-session', {
    ```

Now your local development environment is fully set up. You can edit your HTML/CSS/JS files and see the changes reflected instantly with Live Server. When you edit your Python backend files, the server will restart automatically (if you enabled `debug=True`). You can also stop the backend server with `Ctrl+C`.

**Remember to change the `fetch` URL in `checkout.html` back to the production URL (`https://clokka.co.uk/...`) before you commit and deploy your final changes.**